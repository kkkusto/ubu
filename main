def format_rows_count_generic_query(table_name, min_yr, max_yr, primary_partition_name, secondary_partition_name, is_secondary_partition_present):
    if is_secondary_partition_present:
        return "SELECT count(*) FROM {} WHERE {} >= {} AND {} <= {}".format(table_name, secondary_partition_name, min_yr, secondary_partition_name, max_yr) 
    else:
        return "SELECT count(*) FROM {} WHERE {} >= {} AND {} <= {}".format(table_name, primary_partition_name, min_yr, primary_partition_name, max_yr)
    



def format_insert_to_part2_generic(table_name_part1, table_name_part2, min_yr, max_yr, primary_partition_name, secondary_partition_name, is_secondary_partition_present):
    if is_secondary_partition_present:
        return "INSERT INTO {} PARTITION ({}) SELECT * FROM {} WHERE {}>={} AND {}<={}".format(table_name_part2, secondary_partition_name, table_name_part1, secondary_partition_name, min_yr, secondary_partition_name, max_yr)
    else:
        return "INSERT INTO {} PARTITION ({}) SELECT * FROM {} WHERE {}>={} AND {}<={}".format(table_name_part2, primary_partition_name, table_name_part1, primary_partition_name, min_yr, primary_partition_name, max_yr)
    

def delete_partition_generic(table_name, min_yr, max_yr, primary_partition_name, secondary_partition_name, is_secondary_partition_present):
    if is_secondary_partition_present:
        return "ALTER TABLE {} DROP IF EXISTS PARTITION ({}>={} AND {}<={})".format(table_name, secondary_partition_name, min_yr, secondary_partition_name, max_yr)
    else:
        return "ALTER TABLE {} DROP IF EXISTS PARTITION ({}>={} AND {}<={})".format(table_name, primary_partition_name, min_yr, primary_partition_name, max_yr)
